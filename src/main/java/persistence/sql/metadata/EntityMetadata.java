package persistence.sql.metadata;

import java.lang.reflect.InvocationTargetException;
import java.sql.ResultSet;
import java.util.List;

public class EntityMetadata<T> {

    private final Class<T> entityClass;
    private final TableName tableName;
    private final ColumnMetadata<T> columnMetadata;

    private EntityMetadata(Class<T> entityClass, TableName tableName, ColumnMetadata<T> columnMetadata) {
        this.entityClass = entityClass;
        this.tableName = tableName;
        this.columnMetadata = columnMetadata;
    }

    public static <T> EntityMetadata<T> from(Class<T> clazz) {
        return new EntityMetadata<>(clazz, TableName.from(clazz), ColumnMetadata.from(clazz));
    }

    public String getTableName() {
        return tableName.value();
    }

    public String getPrimaryKeyName() {
        return columnMetadata.getPrimaryKey().getName();
    }

    public List<Column<T>> getColumns() {
        return columnMetadata.getColumns();
    }

    public List<Column<T>> getColumnsWithoutAutoGenerated() {
        return columnMetadata.getColumnsWithoutPrimaryKey();
    }

    public void fillId(T entity, long generatedKey) {
        columnMetadata.fillId(entity, generatedKey);
    }

    public ColumnValue extractIdValue(T entity) {
        return columnMetadata.extractIdValue(entity);
    }

    public Column<T> getPrimaryKey() {
        return columnMetadata.getPrimaryKey();
    }

    public T generateEntity(ResultSet resultSet) {
        T entity = getEntityInstance();
        fillEntity(entity, resultSet);

        return entity;
    }

    private T getEntityInstance() {
        try {
            return entityClass.getDeclaredConstructor().newInstance();
        } catch (InvocationTargetException | InstantiationException e) {
            throw new IllegalStateException("인스턴스 생성에 실패했습니다", e);
        } catch (IllegalAccessException | NoSuchMethodException e) {
            throw new IllegalStateException("기본 생성자가 존재하지 않습니다.", e);
        }
    }

    private void fillEntity(T entity, ResultSet resultSet) {
        columnMetadata.fillEntity(entity, resultSet);
    }
}
