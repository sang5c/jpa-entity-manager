package persistence.sql.metadata;

import java.lang.reflect.InvocationTargetException;
import java.sql.ResultSet;
import java.util.List;

public class EntityMetadata {

    private final Class<?> entityClass;
    private final TableName tableName;
    private final ColumnMetadata columnMetadata;

    private EntityMetadata(Class<?> entityClass, TableName tableName, ColumnMetadata columnMetadata) {
        this.entityClass = entityClass;
        this.tableName = tableName;
        this.columnMetadata = columnMetadata;
    }

    public static EntityMetadata from(Class<?> clazz) {
        return new EntityMetadata(clazz, TableName.from(clazz), ColumnMetadata.from(clazz));
    }

    public String getTableName() {
        return tableName.value();
    }

    public String getPrimaryKeyName() {
        return columnMetadata.getPrimaryKey().getName();
    }

    public List<Column> getColumns() {
        return columnMetadata.getColumns();
    }

    public List<Column> getColumnsWithoutAutoGenerated() {
        return columnMetadata.getColumnsWithoutPrimaryKey();
    }

    public void fillId(Object entity, long generatedKey) {
        columnMetadata.fillId(entity, generatedKey);
    }

    public ColumnValue extractIdValue(Object entity) {
        return columnMetadata.extractIdValue(entity);
    }

    public Column getPrimaryKey() {
        return columnMetadata.getPrimaryKey();
    }

    public <T> T generateEntity(ResultSet resultSet) {
        T entity = (T) getEntityInstance();
        fillEntity(entity, resultSet);

        return entity;
    }

    private Object getEntityInstance() {
        try {
            return entityClass.getDeclaredConstructor().newInstance();
        } catch (InvocationTargetException | InstantiationException e) {
            throw new IllegalStateException("인스턴스 생성에 실패했습니다", e);
        } catch (IllegalAccessException | NoSuchMethodException e) {
            throw new IllegalStateException("기본 생성자가 존재하지 않습니다.", e);
        }
    }

    private void fillEntity(Object entity, ResultSet resultSet) {
        columnMetadata.fillEntity(entity, resultSet);
    }
}
