package persistence.sql.dml;

import persistence.sql.metadata.Column;
import persistence.sql.metadata.EntityMetadata;

import java.util.List;

public class DmlQueryBuilder {

    private static final String JOIN_DELIMITER = ", ";

    public String buildInsertQuery(EntityMetadata metadata, Object entity) {

        return """
                insert into %s (%s)\s
                values (%s)
                ;"""
                .formatted(
                        metadata.getTableName(),
                        String.join(JOIN_DELIMITER, getColumnNames(metadata.getColumnsWithoutAutoGenerated())),
                        String.join(JOIN_DELIMITER, getColumnValues(metadata.getColumnsWithoutAutoGenerated(), entity))
                );
    }

    private static List<String> getColumnNames(List<Column> columns) {
        return columns.stream()
                .map(Column::getName)
                .toList();
    }

    private List<String> getColumnValues(List<Column> columns, Object entity) {
        return columns.stream()
                .map(column -> column.extractColumnValue(entity))
                .map(Object::toString)
                .toList();
    }

    public String buildSelectAllQuery(Class<?> entityClass) {
        EntityMetadata metadata = EntityMetadata.from(entityClass);

        return """
                select %s\s
                from %s
                ;"""
                .formatted(
                        String.join(JOIN_DELIMITER, getColumnNames(metadata.getColumns())),
                        metadata.getTableName()
                );
    }

    public String buildSelectByIdQuery(EntityMetadata metadata, Object id) {
        return """
                select %s\s
                from %s\s
                where %s = %s
                ;"""
                .formatted(
                        String.join(JOIN_DELIMITER, getColumnNames(metadata.getColumns())),
                        metadata.getTableName(),
                        metadata.getPrimaryKey().getName(),
                        id
                );
    }

    public String buildDeleteQuery(EntityMetadata metadata, Object entity) {
        return """
                delete\s
                from %s\s
                where %s = %s
                ;"""
                .formatted(
                        metadata.getTableName(),
                        metadata.getPrimaryKey().getName(),
                        metadata.extractIdValue(entity)
                );
    }

    public String buildUpdateQuery(EntityMetadata metadata, Object entity) {
        return """
                update %s\s
                set %s\s
                where %s
                ;"""
                .formatted(
                        metadata.getTableName(),
                        String.join(JOIN_DELIMITER, equalityExpressions(metadata.getColumnsWithoutAutoGenerated(), entity)),
                        equalityExpression(metadata.getPrimaryKey(), entity)
                );
    }

    private List<String> equalityExpressions(List<Column> columns, Object entity) {
        return columns.stream()
                .map(column -> equalityExpression(column, entity))
                .toList();
    }

    private String equalityExpression(Column column, Object entity) {
        return column.getName() + " = " + column.extractColumnValue(entity);
    }
}
